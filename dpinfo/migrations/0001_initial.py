# Generated by Django 2.1 on 2018-08-02 05:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dpinfo.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppVariables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': '应用变量表',
                'verbose_name_plural': '应用变量表',
            },
        ),
        migrations.CreateModel(
            name='DbBaseInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('db_charset', models.PositiveIntegerField(choices=[(1, 'AMERICAN_AMERICA.ZHS16GBK'), (2, 'AMERICAN_AMERICA.UTF8 ')], default=2)),
            ],
            options={
                'verbose_name': '数据库信息',
                'verbose_name_plural': '数据库信息',
            },
        ),
        migrations.CreateModel(
            name='DbVariables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255, unique=True, validators=[dpinfo.models.varildate_var], verbose_name='数据库key')),
                ('value', models.CharField(max_length=255, verbose_name='数据库value')),
            ],
            options={
                'verbose_name': '数据库变量表',
                'verbose_name_plural': '数据库变量表',
            },
        ),
        migrations.CreateModel(
            name='EmailList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'verbose_name': '邮件地址',
                'verbose_name_plural': '邮件地址',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environment_name', models.CharField(max_length=50, unique=True, verbose_name='环境名')),
                ('app_variables', models.ManyToManyField(blank=True, related_name='en_app_var_set', to='dpinfo.AppVariables')),
                ('db_variables', models.ManyToManyField(blank=True, related_name='en_db_var_set', to='dpinfo.DbVariables', verbose_name='数据库变量')),
            ],
            options={
                'verbose_name': '部署环境',
                'verbose_name_plural': '部署环境',
            },
        ),
        migrations.CreateModel(
            name='ExecuteSqlLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sql_file_name', models.CharField(max_length=128)),
                ('status', models.IntegerField(choices=[(0, 'successfull'), (1, 'failed')])),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('contents', models.TextField()),
                ('db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpinfo.DbBaseInfo')),
            ],
            options={
                'verbose_name': 'sql执行日志记录',
                'verbose_name_plural': 'sql执行日志记录',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Ansible组',
                'verbose_name_plural': 'Ansible组',
            },
        ),
        migrations.CreateModel(
            name='HostEnvironmentRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_type', models.IntegerField(choices=[(0, 'javaapps'), (1, 'webapps')])),
            ],
            options={
                'verbose_name': '绑定关系表',
                'verbose_name_plural': '绑定关系表',
            },
        ),
        migrations.CreateModel(
            name='Hosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipaddr', models.GenericIPAddressField(unique=True)),
                ('host_type', models.IntegerField(choices=[(0, 'app'), (1, 'db')])),
            ],
            options={
                'verbose_name': '主机',
                'verbose_name_plural': '主机',
            },
        ),
        migrations.CreateModel(
            name='JavaAppFoot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foot_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Java应用服务名',
                'verbose_name_plural': 'Java应用服务名',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('lastversion', models.CharField(blank=True, max_length=255, null=True)),
                ('pass_uat_test', models.BooleanField()),
                ('production_tag', models.BooleanField(default=False)),
                ('fun_job_name', models.CharField(blank=True, max_length=255, null=True)),
                ('uat_job_name', models.CharField(blank=True, max_length=255, null=True)),
                ('mn_prod_deploy_job', models.CharField(blank=True, max_length=255, null=True)),
                ('sp_prod_deploy_job', models.CharField(blank=True, max_length=255, null=True)),
                ('last_fun_successful_dir', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_email', models.ManyToManyField(blank=True, related_name='admin_email', to='dpinfo.EmailList')),
                ('develop_email', models.ManyToManyField(blank=True, related_name='develop_email', to='dpinfo.EmailList')),
                ('test_email', models.ManyToManyField(blank=True, related_name='test_email', to='dpinfo.EmailList')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
            },
        ),
        migrations.CreateModel(
            name='SvnPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('svn_charset', models.PositiveIntegerField(choices=[(1, 'zh_CN.GB18030'), (2, 'en_US.UTF-8')], default=2)),
            ],
            options={
                'verbose_name': 'svn路径',
                'verbose_name_plural': 'svn路径',
            },
        ),
        migrations.CreateModel(
            name='Templates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': '自定义配置模版',
                'verbose_name_plural': '自定义配置模版',
            },
        ),
        migrations.CreateModel(
            name='Tomcat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('http_type', models.IntegerField(choices=[(0, 'http'), (1, 'https')])),
                ('shutdown_port', models.PositiveIntegerField()),
                ('http_port', models.PositiveIntegerField()),
                ('https_port', models.PositiveIntegerField()),
                ('jvm_size', models.PositiveIntegerField(default=2048)),
            ],
            options={
                'verbose_name': 'Tomcat配置',
                'verbose_name_plural': 'Tomcat配置',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': '版本',
                'verbose_name_plural': '版本',
            },
        ),
        migrations.AlterUniqueTogether(
            name='tomcat',
            unique_together={('name', 'http_type', 'shutdown_port', 'http_port', 'https_port')},
        ),
        migrations.AddField(
            model_name='project',
            name='version',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='version', to='dpinfo.Version'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='app_foot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dpinfo.JavaAppFoot'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='app_variables',
            field=models.ManyToManyField(blank=True, related_name='en_r_app_var_set', to='dpinfo.AppVariables'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='db_variables',
            field=models.ManyToManyField(blank=True, related_name='en_r_db_var_set', to='dpinfo.DbVariables'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpinfo.Environment'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpinfo.Group'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='hosts',
            field=models.ManyToManyField(to='dpinfo.Hosts'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpinfo.Project'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='templates',
            field=models.ManyToManyField(blank=True, to='dpinfo.Templates'),
        ),
        migrations.AddField(
            model_name='hostenvironmentrelation',
            name='tomcat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dpinfo.Tomcat'),
        ),
        migrations.AddField(
            model_name='executesqllog',
            name='svn',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpinfo.SvnPath'),
        ),
        migrations.AddField(
            model_name='executesqllog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dbbaseinfo',
            name='db_password',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='db_password_set', to='dpinfo.DbVariables'),
        ),
        migrations.AddField(
            model_name='dbbaseinfo',
            name='db_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='db_user_set', to='dpinfo.DbVariables'),
        ),
        migrations.AddField(
            model_name='dbbaseinfo',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host_set', to='dpinfo.DbVariables'),
        ),
        migrations.AddField(
            model_name='dbbaseinfo',
            name='port',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_set', to='dpinfo.DbVariables'),
        ),
        migrations.AddField(
            model_name='dbbaseinfo',
            name='sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sid_set', to='dpinfo.DbVariables'),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('name', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='hostenvironmentrelation',
            unique_together={('environment', 'group', 'project', 'app_foot', 'group_type')},
        ),
    ]
